# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Level {
  id: ID!
  name: String!
  description: String!
  isCompleted: Boolean!
  percentaje: Int!
  qualification: Int!
  createdAt: String!
  updatedAt: String!
  userId: Int!
  isActive: Boolean!
  difficulty: String!
  lenguageId: ID!
}

type User {
  id: ID!
  fullName: String!
  email: String!
  roles: [String!]!
  isActive: Boolean!
  lastUpdateBy: User
}

type Skill {
  id: ID!
  name: String!
  description: String!
  color: String!
  isActive: Boolean!
  createdAt: String!
  updatedAt: String!
}

type Content {
  id: ID!
  name: String!
  description: String!
  isCompleted: Boolean!
  createdAt: String!
  updatedAt: String!
  levelId: ID!
  userId: Int!
  markdownPath: String
  assignedTeachers: [User!]
  status: String!
  validationStatus: String!
  publishedAt: String
  skill: Skill
  skillId: ID
}

type Activity {
  id: ID!
  name: String!
  description: String!
  indication: String!
  example: String!
  contentId: ID!
  createdAt: String!
  updatedAt: String!
  userId: Int!
}

type Homework {
  id: ID!
  name: String!
  exercise: String!
  correctAnswer: String!
  activityId: ID!
  createdAt: String!
  updatedAt: String!
  userId: Int!
}

type PaginatedUsers {
  users: [User!]!
  total: Int!
  page: Int!
  limit: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type AuthResponse {
  token: String!
  user: User!
}

type Lenguage {
  id: ID!
  name: String!
  createdAt: String!
  updatedAt: String!
  isActive: Boolean!
}

type Query {
  levels: [Level!]!
  level(id: ID!): Level!
  levelsByLenguage(lenguageId: ID!): [Level!]!
  contentsByLevelPublic(levelId: ID!): [Content!]!
  contentsBySkillPublic(skillId: ID!): [Content!]!
  contentsByLevelAndSkillPublic(levelId: ID!, skillId: ID!): [Content!]!
  contentMarkdownPublic(contentId: ID!): String!
  contents: [Content!]!
  contentsByLevel(levelId: ID!): [Content!]!
  contentsByTeacher(teacherId: ID!): [Content!]!
  contentsBySkill(skillId: ID!): [Content!]!
  contentsByLevelAndSkill(levelId: ID!, skillId: ID!): [Content!]!
  myAssignedContents: [Content!]!
  content(id: ID!): Content!
  contentMarkdown(contentId: ID!): String!
  validatedContentsByLevel(levelId: ID!): [Content!]!
  validatedContentsBySkill(skillId: ID!): [Content!]!
  validatedContentsByLevelAndSkill(levelId: ID!, skillId: ID!): [Content!]!
  skillsActivePublic: [Skill!]!
  skills: [Skill!]!
  skillsActive: [Skill!]!
  skill(id: ID!): Skill!
  activities: [Activity!]!
  activitiesByContent(contentId: ID!): [Activity!]!
  activity(id: ID!): Activity!
  homeworks: [Homework!]!
  homework(id: Int!): Homework!
  users(roles: [ValidRoles!] = []): [User!]!
  usersPaginated(roles: [ValidRoles!] = [], search: String, page: Int = 1, limit: Int = 10): PaginatedUsers!
  user(id: ID!): User!
  revalidate: AuthResponse!
  lenguages: [Lenguage!]!
  lenguagesActivate: [Lenguage!]!
  lenguage(id: ID!): Lenguage!
}

enum ValidRoles {
  superUser
  admin
  docente
  alumno
  mortal
}

type Mutation {
  createLevel(createLevelInput: CreateLevelInput!): Level!
  updateLevel(updateLevelInput: UpdateLevelInput!): Level!
  removeLevel(id: ID!): Level!
  createContent(createContentInput: CreateContentInput!): Content!
  updateContent(updateContentInput: UpdateContentInput!): Content!
  assignTeachersToContent(contentId: ID!, teacherIds: [ID!]!): Content!
  removeTeacherFromContent(contentId: ID!, teacherId: ID!): Content!
  removeContent(id: ID!): Content!
  updateContentMarkdown(contentId: ID!, markdownContent: String!): Boolean!
  validateContent(contentId: ID!): Content!
  invalidateContent(contentId: ID!): Content!
  validateAllContent: String!
  convertDocxToMarkdown(contentId: ID!, docxBase64: String!): Boolean!
  createSkill(createSkillInput: CreateSkillInput!): Skill!
  updateSkill(updateSkillInput: UpdateSkillInput!): Skill!
  removeSkill(id: ID!): Skill!
  toggleSkillActive(id: ID!): Skill!
  createActivity(createActivityInput: CreateActivityInput!): Activity!
  updateActivity(updateActivityInput: UpdateActivityInput!): Activity!
  removeActivity(id: ID!): Activity!
  createHomework(createHomeworkInput: CreateHomeworkInput!): Homework!
  updateHomework(updateHomeworkInput: UpdateHomeworkInput!): Homework!
  removeHomework(id: Int!): Homework!
  blockUser(id: ID!): User!
  updateUserRoles(updateUserRolesInput: UpdateUserRolesInput!): User!
  signin(signUpInput: SignupInput!): AuthResponse!
  login(loginInput: LoginInput!): AuthResponse!
  createLenguage(createLenguageInput: CreateLenguageInput!): Lenguage!
  updateLenguage(updateLenguageInput: UpdateLenguageInput!): Lenguage!
  removeLenguage(id: ID!): Lenguage!
}

input CreateLevelInput {
  name: String!
  description: String!
  difficulty: String = "beginner"
  lenguageId: ID!
}

input UpdateLevelInput {
  id: ID!
  name: String
  description: String
  difficulty: String
}

input CreateContentInput {
  name: String!
  description: String!
  levelId: ID!
  teacherIds: [ID!]
  status: String
  validationStatus: String
  skillId: ID
}

input UpdateContentInput {
  name: String
  description: String
  levelId: ID
  teacherIds: [ID!]
  status: String
  validationStatus: String
  skillId: ID
  id: ID!
}

input CreateSkillInput {
  name: String!
  description: String!
  color: String
}

input UpdateSkillInput {
  name: String
  description: String
  color: String
  id: ID!
}

input CreateActivityInput {
  name: String!
  description: String!
  indication: String!
  example: String!
  contentId: ID!
}

input UpdateActivityInput {
  name: String
  description: String
  indication: String
  example: String
  contentId: ID
  id: ID!
}

input CreateHomeworkInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateHomeworkInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateUserRolesInput {
  id: ID!
  roles: [ValidRoles!]!
}

input SignupInput {
  email: String!
  fullName: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateLenguageInput {
  name: String!
}

input UpdateLenguageInput {
  name: String
  id: ID!
}